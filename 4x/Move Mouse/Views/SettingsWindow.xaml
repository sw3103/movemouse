<Window x:Class="ellabi.Views.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:toggleSwitch="clr-namespace:ToggleSwitch;assembly=ToggleSwitch"
        xmlns:converters="clr-namespace:ellabi.Converters"
        xmlns:actions="clr-namespace:ellabi.Actions"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:schedules="clr-namespace:ellabi.Schedules"
        xmlns:classes="clr-namespace:ellabi.Classes"
        xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
        mc:Ignorable="d"
        Title="Move Mouse Settings" Height="412" Width="640" Icon="/Resources/Mouse.ico" WindowStartupLocation="CenterScreen" ResizeMode="CanMinimize" WindowStyle="None" MouseDown="SettingsWindow_OnMouseDown" ShowActivated="True" Loaded="SettingsWindow_OnLoaded">
    <Grid Background="{StaticResource StandardWindowBackground}">
        <Grid.Resources>
            <!--<converters:ObjectToTypeStringConverter x:Key="ObjectToTypeStringConverter"/>-->
            <converters:DoubleDividedByTwoConverter x:Key="DoubleDividedByTwoConverter"/>
            <converters:StartupTaskStateToBoolConverter x:Key="StartupTaskStateToBoolConverter"/>
            <converters:CursorDirectionToStealthModeBoolConverter x:Key="CursorDirectionToStealthModeBoolConverter"/>
        </Grid.Resources>
        <TabControl Background="Transparent" Margin="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" TabStripPlacement="Right" BorderBrush="{StaticResource StandardBorderBrush}" BorderThickness="3">
            <TabControl.Resources>
                <Style TargetType="TabItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Grid>
                                    <Border Name="Border" Background="Transparent" BorderBrush="{StaticResource StandardLightControlSolidColorBrush}" BorderThickness="0">
                                        <ContentPresenter Name="ContentSite" Width="100" Height="30" VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Header"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Cursor" Value="Hand"/>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="TabHeaderImageStyle" TargetType="Image">
                    <Setter Property="Height" Value="16"/>
                    <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                    <Setter Property="Margin" Value="10,0,0,0"/>
                </Style>
                <Style x:Key="TabHeaderTextBlockStyle" TargetType="TextBlock">
                    <Setter Property="Margin" Value="5,0,0,0"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Foreground" Value="{StaticResource StandardLightTextSolidColorBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource StandardLightControlSolidColorBrush}"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource StandardLightControlSolidColorBrush}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
                <Style x:Key="LabelTextBlockStyle" TargetType="TextBlock">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Foreground" Value="{StaticResource StandardLightTextSolidColorBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="Cursor" Value="Arrow"/>
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource StandardDisabledControlColorBrush}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}" x:Key="HyperLinkTextBlockStyle">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground" Value="{StaticResource StandardLightControlSolidColorBrush}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="Image">
                    <Setter Property="Height" Value="16"/>
                    <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                </Style>
                <Style x:Key="ActionStackPanelImageStyle" TargetType="Image">
                    <Setter Property="Stretch" Value="Uniform"/>
                    <Setter Property="Width" Value="20"/>
                    <Setter Property="Margin" Value="0,2,2,0"/>
                    <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style x:Key="ActionStackPanelTextStyle" TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                    <Setter Property="Margin" Value="5,0,0,0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Value="False">
                            <Setter Property="Foreground" Value="Gray"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
                <Style x:Key="ActionStackPanelStyle" TargetType="StackPanel">
                    <Setter Property="Orientation" Value="Horizontal"/>
                </Style>
                <Style x:Key="OptionStackPanelStyle" TargetType="StackPanel">
                    <Setter Property="Orientation" Value="Horizontal"/>
                    <Setter Property="Margin" Value="0,0,0,10"/>
                    <Setter Property="Height" Value="22"/>
                </Style>
                <Style x:Key="TaskActionButtonStyle" TargetType="Button" BasedOn="{StaticResource NoChromeButton}">
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Margin" Value="0,5,0,5"/>
                </Style>
                <Style x:Key="TaskActionButtonImageStyle" TargetType="Image">
                    <Setter Property="Width" Value="24"/>
                </Style>
                <Style x:Key="TaskActionButtonMenuImageStyle" TargetType="Image">
                    <Setter Property="Width" Value="16"/>
                </Style>
                <Style x:Key="TaskActionButtonMenuItemStyle" TargetType="MenuItem">
                    <Setter Property="Foreground" Value="{StaticResource StandardLightTextSolidColorBrush}"/>
                </Style>
                <Style x:Key="ContextMenuStyle" TargetType="ContextMenu">
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
                    <Setter Property="HasDropShadow" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ContextMenu">
                                <Border x:Name="Border" Background="{StaticResource StandardWindowBackground}" BorderBrush="{StaticResource StandardBorderBrush}" BorderThickness="3">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="HasDropShadow" Value="True">
                                        <Setter TargetName="Border" Property="Padding" Value="3"/>
                                        <Setter TargetName="Border" Property="BorderThickness" Value="3"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
            <TabItem>
                <TabItem.Resources>
                    <DataTemplate DataType="{x:Type actions:MoveMouseCursorAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/MoveMouseCursorAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Move Mouse Cursor"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:ClickMouseAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ClickMouseAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Click Mouse Button"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:ScrollMouseAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ScrollMouseWheelAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Scroll Mouse Wheel"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:PositionMouseCursorAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/PositionMouseCursorAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Position Mouse Cursor"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:KeyboardPressAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/Keyboard_icon_Light_128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Keyboard press"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:ActivateApplicationAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ActivateWindowAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Activate Application"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:CommandAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/CommandAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Run Command"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:ScriptAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ScriptAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="PowerShell Script"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type actions:SleepAction}">
                        <StackPanel Style="{StaticResource ActionStackPanelStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource ActionStackPanelImageStyle}">
                                        <Setter Property="Source" Value="/Resources/SleepAction_Light_128x128.png"/>
                                        <!--<Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                            <Setter Property="Source" Value="/Resources/Exclamation_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>-->
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActionStackPanelTextStyle}">
                                        <Setter Property="Text" Value="{Binding Path=Name, NotifyOnTargetUpdated=True}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name, NotifyOnTargetUpdated=True}" Value="{x:Null}">
                                                <Setter Property="Text" Value="Sleep"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </DataTemplate>
                </TabItem.Resources>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Actions_Dark_64x64.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Actions_Light_64x64.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Actions_Light_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="Actions" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="200"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <ListView Grid.Column="0" ItemsSource="{Binding Path=Settings.Actions, NotifyOnTargetUpdated=True}" SelectedItem="{Binding Path=SelectedAction, NotifyOnTargetUpdated=True}" SelectionMode="Single" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0" Background="Transparent" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}">
                            <ListView.Resources>
                                <Style TargetType="ScrollViewer" BasedOn="{StaticResource StandardScrollViewerStyle}"/>
                            </ListView.Resources>
                        </ListView>
                        <StackPanel Grid.Column="2" VerticalAlignment="Center">
                            <Button Style="{StaticResource TaskActionButtonStyle}" Command="{Binding Path=MoveUpSelectedActionCommand, NotifyOnTargetUpdated=True}">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/UpArrow_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/UpArrow_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Button Click="AddActionButton_OnClick">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TaskActionButtonStyle}">
                                        <Style.Triggers>
                                            <EventTrigger RoutedEvent="Click">
                                                <EventTrigger.Actions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                                <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                                            </BooleanAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger.Actions>
                                            </EventTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                <Button.ContextMenu>
                                    <ContextMenu StaysOpen="True" Style="{StaticResource ContextMenuStyle}">
                                        <MenuItem Header="Move Mouse Cursor" Click="AddMoveMouseCursorAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/MoveMouseCursorAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Keyboard press" Click="AddKeyboardPressAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/Keyboard_icon_Light_128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Click Mouse Button" Click="AddClickMouseAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/ClickMouseAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Scroll Mouse Wheel" Click="AddScrollMouseAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/ScrollMouseWheelAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Position Mouse Cursor" Click="AddPositionMouseCursorAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/PositionMouseCursorAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Activate Application" Click="ActivateApplicationAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/ActivateWindowAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Run Command" Click="AddCommandAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/CommandAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="PowerShell Script" Click="AddScriptAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/ScriptAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Sleep" Click="AddSleepAction_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                            <MenuItem.Icon>
                                                <Image Source="/Resources/SleepAction_Light_128x128.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </ContextMenu>
                                </Button.ContextMenu>
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/ActionsAdd_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/ActionsAdd_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Button Style="{StaticResource TaskActionButtonStyle}" Command="{Binding Path=RemoveSelectedActionCommand, NotifyOnTargetUpdated=True}">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/ActionsRemove_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/ActionsRemove_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Button Style="{StaticResource TaskActionButtonStyle}" Command="{Binding Path=MoveDownSelectedActionCommand, NotifyOnTargetUpdated=True}">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/DownArrow_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/DownArrow_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                        </StackPanel>
                        <ContentPresenter Grid.Column="4" Content="{Binding Path=SelectedAction, NotifyOnTargetUpdated=True}">
                            <ContentPresenter.Resources>
                                <GridLength x:Key="LabelColumnWidth">60</GridLength>
                                <GridLength x:Key="LabelColumnHeight">22</GridLength>
                                <Grid x:Key="NameGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Name" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <xctk:WatermarkTextBox Grid.Column="1" Grid.Row="0" Text="{Binding Path=Name, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Watermark="Optional"/>
                                </Grid>
                                <Grid x:Key="DistanceGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Distance" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <xctk:IntegerUpDown Grid.Column="1" Grid.Row="0" Value="{Binding Path=Distance, NotifyOnTargetUpdated=True}" Increment="1" Minimum="1" Maximum="9999">
                                        <xctk:IntegerUpDown.Style>
                                            <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                                                <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Direction, NotifyOnTargetUpdated=True}" Value="None">
                                                        <Setter Property="IsEnabled" Value="False"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </xctk:IntegerUpDown.Style>
                                    </xctk:IntegerUpDown>
                                </Grid>
                                <Grid x:Key="WaitForReturnGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Wait" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <Grid Grid.Column="1" Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="10"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" IsChecked="{Binding Path=WaitForExit, NotifyOnTargetUpdated=True, Mode=TwoWay}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                        <Image Grid.Column="2" Source="/Resources/Warning_128x128.png" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="Long running processes may cause Move Mouse&#xD;&#xA;to hang if Wait is enabled.">
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=WaitForExit, NotifyOnTargetUpdated=True}" Value="True">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                    </Grid>
                                </Grid>
                                <Grid x:Key="HiddenGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Hidden" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <toggleSwitch:HorizontalToggleSwitch Grid.Column="1" Grid.Row="0" IsChecked="{Binding Path=Hidden, NotifyOnTargetUpdated=True, Mode=TwoWay}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                </Grid>
                                <Grid x:Key="TriggerGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Trigger" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <Grid Grid.Column="1" Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="10"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ComboBox Grid.Column="0" SelectedItem="{Binding Path=Trigger, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=EventTriggerValues}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                        <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" ToolTip="Start - Run this action when Move Mouse starts.&#xD;&#xA;&#xD;&#xA;Interval - Run this action at each interval.&#xD;&#xA;&#xD;&#xA;Stop - Run this action when Move Mouse stops&#xD;&#xA;or pauses (does not include blackouts)."/>
                                    </Grid>
                                </Grid>
                                <Grid x:Key="RepeatGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Trigger, NotifyOnTargetUpdated=True}" Value="Interval">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Repeat" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <toggleSwitch:HorizontalToggleSwitch Grid.Column="1" Grid.Row="0" IsChecked="{Binding Path=Repeat, NotifyOnTargetUpdated=True, Mode=TwoWay}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                </Grid>
                                <Grid x:Key="EnabledGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Enabled" Style="{StaticResource LabelTextBlockStyle}"/>
                                    <toggleSwitch:HorizontalToggleSwitch Grid.Column="1" Grid.Row="0" IsChecked="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                                </Grid>
                                <Grid x:Key="TestButtonGrid" x:Shared="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                        <RowDefinition Height="10"/>
                                    </Grid.RowDefinitions>
                                    <Button Grid.Column="1" Content="Test" Command="{Binding Path=ExecuteCommand, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                </Grid>
                                <DataTemplate DataType="{x:Type actions:ActivateApplicationAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Mode" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" SelectedItem="{Binding Path=Mode, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=SearchModeValues}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" ToolTip="Window - Uses the window name to locate the application. This&#xD;&#xA;will give finer control when you have multiple instances of the&#xD;&#xA;same application open.&#xD;&#xA;&#xD;&#xA;Process - Uses the process name to locate the application. A&#xD;&#xA;good option if your application's window name frequently&#xD;&#xA;changes, such as a web browser."/>
                                            </Grid>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Name" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" ItemsSource="{Binding Path=AvailableApplications, NotifyOnTargetUpdated=True}" Text="{Binding Path=Application, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}">
                                                    <ComboBox.Style>
                                                        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                                            <Setter Property="IsEditable" Value="False"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=Mode}" Value="Window">
                                                                    <Setter Property="IsEditable" Value="True"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ComboBox.Style>
                                                </ComboBox>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}">
                                                    <Image.ToolTip>
                                                        <Grid Width="440">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="20"/>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="20"/>
                                                                <RowDefinition/>
                                                            </Grid.RowDefinitions>
                                                            <TextBlock Grid.Row="0" Text="If the application's window title changes frequently, consider using a wildcard search pattern, for example:" TextWrapping="Wrap"/>
                                                            <Image Grid.Row="2" Source="/Resources/Windows_Title.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                            <TextBlock Grid.Row="4" TextWrapping="Wrap">
                                                                <Run Text="This window can be found by using "/>
                                                                <Run Text="Move Mouse*" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text=" or "/>
                                                                <Run Text="*Privacy Policy*" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text=" or "/>
                                                                <Run Text="*Word" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text="."/>
                                                            </TextBlock>
                                                        </Grid>
                                                    </Image.ToolTip>
                                                </Image>
                                                <!--<Button Grid.Column="2" HorizontalAlignment="Left" Style="{StaticResource NoChromeButton}" Command="{Binding Path=RefreshApplicationsCommand}" ToolTip="Refresh applications" Cursor="Hand" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}">
                                                    <Image Name="RefreshImage" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality">
                                                        <Image.RenderTransform>
                                                            <RotateTransform CenterX="{Binding ElementName=RefreshImage, Path=ActualWidth, Converter={StaticResource DoubleDividedByTwoConverter}}" CenterY="{Binding ElementName=RefreshImage, Path=ActualHeight, Converter={StaticResource DoubleDividedByTwoConverter}}"/>
                                                        </Image.RenderTransform>
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="/Resources/Refresh_Dark_64x64.png"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Source" Value="/Resources/Refresh_Light_64x64.png"/>
                                                                    </Trigger>
                                                                    <EventTrigger RoutedEvent="Image.MouseDown">
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" From="0" To="360" Duration="0:0:0.75" RepeatBehavior="1.5x"/>
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </EventTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>-->
                                            </Grid>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:KeyboardPressAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Input" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <xctk:WatermarkTextBox Grid.Column="0" Grid.Row="0" Text="{Binding Path=Input, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Watermark="Input"/>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" 
                                                       RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" >
                                                    <Image.ToolTip>
    <Grid Width="440">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="5"/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>

                                                                <RowDefinition Height="5"/>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="5"/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="5"/>
                                                                <RowDefinition/>
                                                            </Grid.RowDefinitions>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="2*"></ColumnDefinition>
                                                                <ColumnDefinition Width="3*"></ColumnDefinition>
                                                                <ColumnDefinition Width="2*"></ColumnDefinition>
                                                                <ColumnDefinition Width="3*"></ColumnDefinition>
                                                            </Grid.ColumnDefinitions>
                                                            <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" Text="To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table." TextWrapping="Wrap"/>
                                                            <TextBlock Grid.Row="2" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Key"></TextBlock>
                                                            <TextBlock Grid.Row="2" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Code"></TextBlock>
                                                            <TextBlock Grid.Row="2" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Key"></TextBlock>
                                                            <TextBlock Grid.Row="2" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Code"></TextBlock>
                                                            <TextBlock Grid.Row="3" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="BACKSPACE"></TextBlock>
                                                            <TextBlock Grid.Row="3" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{BACKSPACE},{BS},or{BKSP}"></TextBlock>
                                                            <TextBlock Grid.Row="3" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="BREAK"></TextBlock>
                                                            <TextBlock Grid.Row="3" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{BREAK}"></TextBlock>
                                                            <TextBlock Grid.Row="4" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="CAPS LOCK"></TextBlock>
                                                            <TextBlock Grid.Row="4" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{CAPSLOCK}"></TextBlock>
                                                            <TextBlock Grid.Row="4" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="DEL or DELETE"></TextBlock>
                                                            <TextBlock Grid.Row="4" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{DELETE} or {DEL}"></TextBlock>
                                                            <TextBlock Grid.Row="5" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="DOWN ARROW"></TextBlock>
                                                            <TextBlock Grid.Row="5" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{DOWN}"></TextBlock>
                                                            <TextBlock Grid.Row="5" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="END"></TextBlock>
                                                            <TextBlock Grid.Row="5" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{END}"></TextBlock>
                                                            <TextBlock Grid.Row="6" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="ENTER"></TextBlock>
                                                            <TextBlock Grid.Row="6" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{ENTER} or ~"></TextBlock>
                                                            <TextBlock Grid.Row="6" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="ESC"></TextBlock>
                                                            <TextBlock Grid.Row="6" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{ESC}"></TextBlock>
                                                            <TextBlock Grid.Row="7" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="HELP"></TextBlock>
                                                            <TextBlock Grid.Row="7" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{HELP}"></TextBlock>
                                                            <TextBlock Grid.Row="7" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="HOME"></TextBlock>
                                                            <TextBlock Grid.Row="7" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{HOME}"></TextBlock>
                                                            <TextBlock Grid.Row="8" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="INS or INSERT"></TextBlock>
                                                            <TextBlock Grid.Row="8" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{INSERT} or {INS}"></TextBlock>
                                                            <TextBlock Grid.Row="8" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="LEFT ARROW"></TextBlock>
                                                            <TextBlock Grid.Row="8" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{LEFT}"></TextBlock>
                                                            <TextBlock Grid.Row="9" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="NUM LOCK"></TextBlock>
                                                            <TextBlock Grid.Row="9" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{NUMLOCK}"></TextBlock>
                                                            <TextBlock Grid.Row="9" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="PAGE DOWN"></TextBlock>
                                                            <TextBlock Grid.Row="9" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{PGDN}"></TextBlock>
                                                            <TextBlock Grid.Row="10" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="PAGE UP"></TextBlock>
                                                            <TextBlock Grid.Row="10" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{PGUP}"></TextBlock>
                                                            <TextBlock Grid.Row="10" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="PRINT SCREEN"></TextBlock>
                                                            <TextBlock Grid.Row="10" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{PRTSC}(reserved)"></TextBlock>
                                                            <TextBlock Grid.Row="11" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="RIGHT ARROW"></TextBlock>
                                                            <TextBlock Grid.Row="11" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{RIGHT}"></TextBlock>
                                                            <TextBlock Grid.Row="11" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="SCROLL LOCK"></TextBlock>
                                                            <TextBlock Grid.Row="11" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{SCROLLLOCK}"></TextBlock>
                                                            <TextBlock Grid.Row="12" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="TAB"></TextBlock>
                                                            <TextBlock Grid.Row="12" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{TAB}"></TextBlock>
                                                            <TextBlock Grid.Row="12" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="UP ARROW"></TextBlock>
                                                            <TextBlock Grid.Row="12" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{UP}"></TextBlock>
                                                            <TextBlock Grid.Row="13" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="F1"></TextBlock>
                                                            <TextBlock Grid.Row="13" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{F1}"></TextBlock>
                                                            <TextBlock Grid.Row="13" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="F2"></TextBlock>
                                                            <TextBlock Grid.Row="13" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{F2}"></TextBlock>
                                                            <TextBlock Grid.Row="14" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="F3"></TextBlock>
                                                            <TextBlock Grid.Row="14" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{F3}"></TextBlock>
                                                            <TextBlock Grid.Row="14" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="F4"></TextBlock>
                                                            <TextBlock Grid.Row="14" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{F4}"></TextBlock>
                                                            <TextBlock Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="4" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="..."></TextBlock>
                                                            <TextBlock Grid.Row="16" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Keypad add"></TextBlock>
                                                            <TextBlock Grid.Row="16" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{ADD}"></TextBlock>
                                                            <TextBlock Grid.Row="16" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Keypad subtract"></TextBlock>
                                                            <TextBlock Grid.Row="16" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{SUBTRACT}"></TextBlock>
                                                            <TextBlock Grid.Row="17" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Keypad multiply"></TextBlock>
                                                            <TextBlock Grid.Row="17" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{MULTIPLY}"></TextBlock>
                                                            <TextBlock Grid.Row="17" Grid.Column="2" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Keypad divide"></TextBlock>
                                                            <TextBlock Grid.Row="17" Grid.Column="3" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="{}{DIVIDE}"></TextBlock>
                                                            <TextBlock Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="4" Text="To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes." TextWrapping="Wrap"/>
                                                            <TextBlock Grid.Row="21" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Key"></TextBlock>
                                                            <TextBlock Grid.Row="21" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="Code"></TextBlock>
                                                            <TextBlock Grid.Row="22" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="SHIFT"></TextBlock>
                                                            <TextBlock Grid.Row="22" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="&#x002B;"></TextBlock>
                                                            <TextBlock Grid.Row="23" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="CTRL"></TextBlock>
                                                            <TextBlock Grid.Row="23" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="&#x005E;"></TextBlock>
                                                            <TextBlock Grid.Row="24" Grid.Column="0" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="ALT"></TextBlock>
                                                            <TextBlock Grid.Row="24" Grid.Column="1" Foreground="{StaticResource StandardLightControlSolidColorBrush}" Text="&#x0025;"></TextBlock>
                                                            <TextBlock Grid.Row="26" Grid.Column="0" Grid.ColumnSpan="4" Text="To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. &#xD;&#xA;For example, to specify to hold down SHIFT while E and C are pressed, use &quot;+(EC)&quot;. To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use &quot;+EC&quot;.&#xD;&#xA;To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times." TextWrapping="Wrap"/>
                                                        </Grid>
                                                    </Image.ToolTip>
                                                </Image>
                                            </Grid>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Mode" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" SelectedItem="{Binding Path=Mode, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=SearchModeValues}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" ToolTip="Window - Uses the window name to locate the application. This&#xD;&#xA;will give finer control when you have multiple instances of the&#xD;&#xA;same application open.&#xD;&#xA;&#xD;&#xA;Process - Uses the process name to locate the application. A&#xD;&#xA;good option if your application's window name frequently&#xD;&#xA;changes, such as a web browser."/>
                                            </Grid>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Name" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" ItemsSource="{Binding Path=AvailableApplications, NotifyOnTargetUpdated=True}" Text="{Binding Path=Application, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}">
                                                    <ComboBox.Style>
                                                        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                                            <Setter Property="IsEditable" Value="False"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=Mode}" Value="Window">
                                                                    <Setter Property="IsEditable" Value="True"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ComboBox.Style>
                                                </ComboBox>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}">
                                                    <Image.ToolTip>
                                                        <Grid Width="440">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="20"/>
                                                                <RowDefinition/>
                                                                <RowDefinition Height="20"/>
                                                                <RowDefinition/>
                                                            </Grid.RowDefinitions>
                                                            <TextBlock Grid.Row="0" Text="If the application's window title changes frequently, consider using a wildcard search pattern, for example:" TextWrapping="Wrap"/>
                                                            <Image Grid.Row="2" Source="/Resources/Windows_Title.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                            <TextBlock Grid.Row="4" TextWrapping="Wrap">
                                                                <Run Text="This window can be found by using "/>
                                                                <Run Text="Move Mouse*" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text=" or "/>
                                                                <Run Text="*Privacy Policy*" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text=" or "/>
                                                                <Run Text="*Word" Foreground="{StaticResource StandardLightControlSolidColorBrush}"/>
                                                                <Run Text="."/>
                                                            </TextBlock>
                                                        </Grid>
                                                    </Image.ToolTip>
                                                </Image>
                                                <!--<Button Grid.Column="2" HorizontalAlignment="Left" Style="{StaticResource NoChromeButton}" Command="{Binding Path=RefreshApplicationsCommand}" ToolTip="Refresh applications" Cursor="Hand" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}">
                                                    <Image Name="RefreshImage" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality">
                                                        <Image.RenderTransform>
                                                            <RotateTransform CenterX="{Binding ElementName=RefreshImage, Path=ActualWidth, Converter={StaticResource DoubleDividedByTwoConverter}}" CenterY="{Binding ElementName=RefreshImage, Path=ActualHeight, Converter={StaticResource DoubleDividedByTwoConverter}}"/>
                                                        </Image.RenderTransform>
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="/Resources/Refresh_Dark_64x64.png"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Source" Value="/Resources/Refresh_Light_64x64.png"/>
                                                                    </Trigger>
                                                                    <EventTrigger RoutedEvent="Image.MouseDown">
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" From="0" To="360" Duration="0:0:0.75" RepeatBehavior="1.5x"/>
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </EventTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>-->
                                            </Grid>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:ClickMouseAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Button" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <ComboBox Grid.Column="1" Grid.Row="0" SelectedItem="{Binding Path=Button, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=MouseButtonValues}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Hold" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <StackPanel Grid.Column="1" Grid.Row="0" Orientation="Horizontal">
                                                <StackPanel.Resources>
                                                    <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                                        <Setter Property="Margin" Value="5,0,5,0"/>
                                                        <Setter Property="IsEnabled" Value="False"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Path=Hold, NotifyOnTargetUpdated=True}" Value="True"/>
                                                                    <Condition Binding="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="IsEnabled" Value="True"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </StackPanel.Resources>
                                                <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Hold, NotifyOnTargetUpdated=True, Mode=TwoWay}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <TextBlock Text="for"/>
                                                <xctk:DecimalUpDown Value="{Binding Path=HoldInterval, NotifyOnTargetUpdated=True}" Increment="0.1" Minimum="0.1" Maximum="9999">
                                                    <xctk:DecimalUpDown.Style>
                                                        <Style TargetType="xctk:DecimalUpDown" BasedOn="{StaticResource {x:Type xctk:DecimalUpDown}}">
                                                            <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=Hold, NotifyOnTargetUpdated=True}" Value="False">
                                                                    <Setter Property="IsEnabled" Value="False"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </xctk:DecimalUpDown.Style>
                                                </xctk:DecimalUpDown>
                                                <TextBlock Text="seconds"/>
                                            </StackPanel>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:CommandAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Path" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <xctk:WatermarkTextBox Grid.Column="0" Text="{Binding Path=FilePath, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Watermark="Path to file"/>
                                                <Button Grid.Column="2" HorizontalAlignment="Left" Style="{StaticResource NoChromeButton}" ToolTip="Browse to your program" Cursor="Hand" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Click="CommandPathBrowseButton_OnClick">
                                                    <Image Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality">
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="/Resources/FileOpen_Dark_64x64.png"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Source" Value="/Resources/FileOpen_Light_64x64.png"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Args" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <xctk:WatermarkTextBox Grid.Column="1" Grid.Row="0" Text="{Binding Path=Arguments, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Watermark="Command line arguments"/>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource WaitForReturnGrid}"/>
                                        <ContentPresenter Content="{StaticResource HiddenGrid}"/>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:MoveMouseCursorAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <ContentPresenter Content="{StaticResource DistanceGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Direction" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Path=CursorDirectionValues}" SelectedItem="{Binding Path=Direction, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Stealth" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" IsChecked="{Binding Path=Direction, NotifyOnTargetUpdated=True, Mode=TwoWay, Converter={StaticResource CursorDirectionToStealthModeBoolConverter}}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <Image Grid.Column="2" Source="/Resources/Help_Dark_64x64.png" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="Mouse cursor movement is not visible."/>
                                            </Grid>
                                        </Grid>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="10"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="10"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Speed" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <ComboBox Grid.Column="1" Grid.Row="0" SelectedItem="{Binding Path=Speed, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=CursorSpeedValues}">
                                                <ComboBox.Style>
                                                    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                                        <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=Direction, NotifyOnTargetUpdated=True}" Value="None">
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ComboBox.Style>
                                            </ComboBox>
                                            <xctk:IntegerUpDown Grid.Column="3" Grid.Row="0" Value="{Binding Path=Delay, NotifyOnTargetUpdated=True}" Increment="1" Minimum="0" Maximum="5000">
                                                <xctk:IntegerUpDown.Style>
                                                    <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                                                        <Setter Property="IsEnabled" Value="False"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Path=Speed, NotifyOnTargetUpdated=True}" Value="Custom"/>
                                                                    <Condition Binding="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="IsEnabled" Value="True"/>
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding Path=Direction, NotifyOnTargetUpdated=True}" Value="None">
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </xctk:IntegerUpDown.Style>
                                            </xctk:IntegerUpDown>
                                            <Image Grid.Column="5" Source="/Resources/Help_Dark_64x64.png" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="Interval in milliseconds between each pixel shift.&#xD;&#xA;&#xD;&#xA;The higher the interval - the slower the cursor will move."/>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:PositionMouseCursorAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Position" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <StackPanel Grid.Column="1" Grid.Row="0" Orientation="Horizontal">
                                                <StackPanel.Resources>
                                                    <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                                                        <Setter Property="Margin" Value="5,0,5,0"/>
                                                    </Style>
                                                    <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}"/>
                                                </StackPanel.Resources>
                                                <TextBlock Text="X" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <xctk:IntegerUpDown Value="{Binding Path=X}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <TextBlock Text="Y" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                                <xctk:IntegerUpDown Value="{Binding Path=Y}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                            </StackPanel>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <Button Grid.Column="1" Command="{Binding Path=StartCursorTrackingCommand, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}">
                                                <Button.Style>
                                                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                        <Setter Property="Content" Value="Track"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=CursorTrackingEnabled, NotifyOnTargetUpdated=True}" Value="True">
                                                                <Setter Property="Content" Value="{Binding Path=CursorTrackingTimeRemaining, NotifyOnTargetUpdated=True}"/>
                                                                <Setter Property="ContentStringFormat" Value="s\.f"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Button.Style>
                                            </Button>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:ScriptAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Script" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <Grid Grid.Column="1" Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="10"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <xctk:WatermarkTextBox Grid.Column="0" Text="{Binding Path=ScriptPath, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Watermark="Path to .ps1 script"/>
                                                <Button Grid.Column="2" HorizontalAlignment="Left" Style="{StaticResource NoChromeButton}" ToolTip="Browse to your PowerShell script" Cursor="Hand" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Click="ScriptPathBrowseButton_OnClick">
                                                    <Image Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality">
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="/Resources/FileOpen_Dark_64x64.png"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Source" Value="/Resources/FileOpen_Light_64x64.png"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource WaitForReturnGrid}"/>
                                        <ContentPresenter Content="{StaticResource HiddenGrid}"/>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                        <ContentPresenter Content="{StaticResource TestButtonGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:ScrollMouseAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <ContentPresenter Content="{StaticResource DistanceGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Direction" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Path=WheelDirectionValues}" SelectedItem="{Binding Path=Direction, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type actions:SleepAction}">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{StaticResource NameGrid}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Random" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="1" Grid.Row="0" IsChecked="{Binding Path=Random, NotifyOnTargetUpdated=True, Mode=TwoWay}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}"/>
                                            <TextBlock Grid.Column="0" Grid.Row="2">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                                        <Setter Property="Text" Value="Duration"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=Random, NotifyOnTargetUpdated=True}" Value="True">
                                                                <Setter Property="Text" Value="Lower"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>
                                            <StackPanel Grid.Column="1" Grid.Row="2" Orientation="Horizontal">
                                                <xctk:DecimalUpDown Value="{Binding Path=Seconds, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Increment="0.1" Minimum="0.1" Maximum="9999"/>
                                                <TextBlock Text="seconds" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Margin="5,0,5,0" Style="{StaticResource LabelTextBlockStyle}"/>
                                            </StackPanel>
                                        </Grid>
                                        <Grid>
                                            <Grid.Style>
                                                <Style TargetType="Grid">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=Random, NotifyOnTargetUpdated=True}" Value="True">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Grid.Style>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{StaticResource LabelColumnWidth}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{StaticResource LabelColumnHeight}"/>
                                                <RowDefinition Height="10"/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Upper" Style="{StaticResource LabelTextBlockStyle}"/>
                                            <StackPanel Grid.Column="1" Grid.Row="0" Orientation="Horizontal">
                                                <xctk:DecimalUpDown Value="{Binding Path=UpperSeconds, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Increment="0.1" Minimum="0.1" Maximum="9999"/>
                                                <TextBlock Text="seconds" IsEnabled="{Binding Path=IsEnabled, NotifyOnTargetUpdated=True}" Margin="5,0,5,0" Style="{StaticResource LabelTextBlockStyle}"/>
                                            </StackPanel>
                                        </Grid>
                                        <ContentPresenter Content="{StaticResource TriggerGrid}"/>
                                        <ContentPresenter Content="{StaticResource RepeatGrid}"/>
                                        <ContentPresenter Content="{StaticResource EnabledGrid}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>
                    <ed:Callout AnchorPoint="1.118,-0.5" CalloutStyle="RoundedRectangle" Fill="{StaticResource StandardWindowBackground}" VerticalAlignment="Bottom" FontSize="14" Height="58" Margin="97,0,279,70" Stroke="{StaticResource StandardLightTextSolidColorBrush}" StrokeThickness="3" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                        <ed:Callout.Content>
                            <StackPanel>
                                <TextBlock Text="Click here to add actions" Foreground="{StaticResource StandardLightTextSolidColorBrush}" Background="Transparent" HorizontalAlignment="Center" TextWrapping="Wrap" Margin="10"/>
                            </StackPanel>
                        </ed:Callout.Content>
                        <ed:Callout.Style>
                            <Style TargetType="ed:Callout">
                                <Setter Property="Opacity" Value="0.0"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Settings.ActionsHaveBeenClicked, NotifyOnTargetUpdated=True}" Value="False">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:1"/>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty = "Visibility">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=Settings.ActionsHaveBeenClicked, NotifyOnTargetUpdated=True}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty = "Visibility">
                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ed:Callout.Style>
                    </ed:Callout>
                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Behaviour_Dark_64x64.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Behaviour_Light_64x64.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Behaviour_Light_64x64.png"/> 
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="Behaviour" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <StackPanel Orientation="Vertical" Margin="10">
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <StackPanel.Resources>
                            <converters:BoolToIndexConverter x:Key="BoolToIndexConverter"/>
                        </StackPanel.Resources>
                        <TextBlock Text="Repeat actions" Style="{StaticResource LabelTextBlockStyle}" Margin="0,0,5,0"/>
                        <ComboBox SelectedIndex="{Binding Path=Settings.RandomInterval, Converter={StaticResource BoolToIndexConverter}}">
                            <ComboBoxItem Content="randomly"/>
                            <ComboBoxItem Content="every"/>
                        </ComboBox>
                        <TextBlock Text="between" Margin="5,0,0,0">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.RandomInterval, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <xctk:IntegerUpDown Value="{Binding Path=Settings.LowerInterval, NotifyOnTargetUpdated=True}" Increment="1" Minimum="1" Maximum="99999" Margin="5,0,5,0"/>
                        <TextBlock Text="and">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.RandomInterval, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <xctk:IntegerUpDown Value="{Binding Path=Settings.UpperInterval, NotifyOnTargetUpdated=True}" Increment="1" Minimum="1" Maximum="99999" Margin="5,0,5,0">
                            <xctk:IntegerUpDown.Style>
                                <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.RandomInterval, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </xctk:IntegerUpDown.Style>
                        </xctk:IntegerUpDown>
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                    <Setter Property="Text" Value="seconds"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=Settings.LowerInterval, NotifyOnTargetUpdated=True}" Value="1"/>
                                                <Condition Binding="{Binding Path=Settings.RandomInterval, NotifyOnTargetUpdated=True}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Text" Value="second"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.AutoPause, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                    <Setter Property="Text" Value="Automatically stop when user activity detected"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.AutoResume, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Text" Value="Automatically pause when user activity detected"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                    <StackPanel>
                        <StackPanel.Style>
                            <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Settings.AutoPause, NotifyOnTargetUpdated=True}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" Grid.Row="4" IsChecked="{Binding Path=Settings.AutoResume, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Automatically resume after" Style="{StaticResource LabelTextBlockStyle}" Margin="5,0,0,0"/>
                            <xctk:IntegerUpDown Value="{Binding Path=Settings.AutoResumeSeconds, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=Settings.AutoResume, NotifyOnTargetUpdated=True}" Increment="1" Minimum="1" Maximum="99999" Margin="5,0,5,0"/>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}">
                                        <Setter Property="Text" Value="seconds of inactivity"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Settings.AutoResumeSeconds, NotifyOnTargetUpdated=True}" Value="1">
                                                <Setter Property="Text" Value="second of inactivity"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </StackPanel>
                    <!--<StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.LaunchAtLogon, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0" Text="Launch Move Mouse at startup" Style="{StaticResource LabelTextBlockStyle}"/>
                    </StackPanel>-->
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=LaunchAtStartup, NotifyOnTargetUpdated=True, Mode=TwoWay, Converter={StaticResource StartupTaskStateToBoolConverter}}">
                            <toggleSwitch:HorizontalToggleSwitch.Style>
                                <Style TargetType="toggleSwitch:HorizontalToggleSwitch" BasedOn="{StaticResource {x:Type toggleSwitch:HorizontalToggleSwitch}}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=LaunchAtStartup, NotifyOnTargetUpdated=True}" Value="DisabledByUser">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </toggleSwitch:HorizontalToggleSwitch.Style>
                        </toggleSwitch:HorizontalToggleSwitch>
                        <TextBlock Margin="5,0,0,0" Text="Launch Move Mouse at start-up" Style="{StaticResource LabelTextBlockStyle}"/>
                        <Image Source="/Resources/Warning_128x128.png" Margin="10,0,0,0" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" ToolTip="Move Mouse start-up has been disabled in&#xD;&#xA;Task Manager, and therefore cannot controlled&#xD;&#xA;from here.&#xD;&#xA;&#xD;&#xA;To re-enable Move Mouse to launch at start-up,&#xD;&#xA;open Task Manager, select Move Mouse in the&#xD;&#xA;Start-up tab, and click Enable.">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=LaunchAtStartup, NotifyOnTargetUpdated=True}" Value="DisabledByUser">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </StackPanel>
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.StartAtLaunch, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0" Text="Start actions when Move Mouse is launched" Style="{StaticResource LabelTextBlockStyle}"/>
                    </StackPanel>
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22"/>
                            <RowDefinition Height="10"/>
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Style="{StaticResource OptionStackPanelStyle}" HorizontalAlignment="Stretch">
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.AdjustRunningVolume, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Adjust volume when Move Mouse is running" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <Grid Grid.Column="2" Grid.Row="0">
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.AdjustRunningVolume, NotifyOnTargetUpdated=True, Mode=OneWay}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <Image Grid.Column="0" Grid.Row="0" Source="/Resources/Volume_Light_64x64.png" Height="18" Style="{StaticResource ActionStackPanelImageStyle}" Margin="0" HorizontalAlignment="Right"/>
                            <Slider Grid.Column="2" Grid.Row="0" Minimum="0" Maximum="100" Interval="1" Ticks="10" HorizontalAlignment="Stretch" Value="{Binding Path=Settings.RunningVolume, NotifyOnTargetUpdated=True}">
                                <Slider.Resources>
                                    <Color x:Key="WindowColor">#FFE8EDF9</Color>
                                    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
                                    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
                                    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
                                    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
                                    <Color x:Key="DisabledForegroundColor">#FF888888</Color>
                                    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
                                    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
                                    <Color x:Key="ControlLightColor">White</Color>
                                    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
                                    <Color x:Key="ControlDarkColor">#FF211AA9</Color>
                                    <Color x:Key="ControlMouseOverColor">Pink</Color>
                                    <Color x:Key="ControlPressedColor">#FF211AA9</Color>
                                    <Color x:Key="GlyphColor">#FF444444</Color>
                                    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
                                    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
                                    <Color x:Key="BorderMediumColor">#FF888888</Color>
                                    <Color x:Key="BorderDarkColor">#FF444444</Color>
                                    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
                                    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>
                                    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
                                    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>
                                    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>
                                    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
                                    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
                                    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
                                    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
                                    <LinearGradientBrush x:Key="MenuPopupBrush" EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0"/>
                                        <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="0.5"/>
                                        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="1"/>
                                    </LinearGradientBrush>
                                    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#000000FF" Offset="0"/>
                                                <GradientStop Color="#600000FF" Offset="0.4"/>
                                                <GradientStop Color="#600000FF" Offset="0.6"/>
                                                <GradientStop Color="#000000FF" Offset="1"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                    <Style x:Key="DecreaseSliderButtonStyle" TargetType="{x:Type RepeatButton}">
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Border Background="{StaticResource StandardBorderBrush}" Height="6"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                    <Style x:Key="IncreaseSliderButtonStyle" TargetType="{x:Type RepeatButton}">
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Border Background="{StaticResource StandardDisabledControlColorBrush}" Height="2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Ellipse x:Name="Ellipse" StrokeThickness="0" Stroke="{StaticResource StandardBorderBrush}">
                                                        <Ellipse.Fill>
                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                <GradientStop Color="{StaticResource StandardDarkControlColor}" Offset="1"/>
                                                                <GradientStop Color="{StaticResource StandardLightControlColor}"/>
                                                            </LinearGradientBrush>
                                                        </Ellipse.Fill>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal"/>
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="Ellipse">
                                                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource StandardLightControlColor}"/>
                                                                        </ColorAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Pressed">
                                                                    <Storyboard>
                                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="Ellipse">
                                                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource StandardDarkControlColor}"/>
                                                                        </ColorAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="Ellipse">
                                                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource StandardDisabledControlColor}"/>
                                                                        </ColorAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                    </Ellipse>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                    <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <TickBar x:Name="TopTick" SnapsToDevicePixels="True" Placement="Top" Height="4" Visibility="Collapsed">
                                                <TickBar.Fill>
                                                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                                                </TickBar.Fill>
                                            </TickBar>
                                            <Border x:Name="TrackBackground" Margin="0" CornerRadius="2" Height="4" Grid.Row="1" BorderThickness="1">
                                                <Border.BorderBrush>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0"/>
                                                                <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0"/>
                                                            </GradientStopCollection>
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.BorderBrush>
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0"/>
                                                                <GradientStop Color="{DynamicResource SliderTrackDarkColor}" Offset="1.0"/>
                                                            </GradientStopCollection>
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Track Grid.Row="1" x:Name="PART_Track">
                                                <Track.DecreaseRepeatButton>
                                                    <RepeatButton Style="{StaticResource DecreaseSliderButtonStyle}" Command="Slider.DecreaseLarge"/>
                                                </Track.DecreaseRepeatButton>
                                                <Track.Thumb>
                                                    <Thumb Style="{StaticResource SliderThumbStyle}"/>
                                                </Track.Thumb>
                                                <Track.IncreaseRepeatButton>
                                                    <RepeatButton Style="{StaticResource IncreaseSliderButtonStyle}" Command="Slider.IncreaseLarge"/>
                                                </Track.IncreaseRepeatButton>
                                            </Track>
                                            <TickBar x:Name="BottomTick" SnapsToDevicePixels="True" Grid.Row="2" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Visibility="Collapsed"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="TickPlacement" Value="TopLeft">
                                                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                            <Trigger Property="TickPlacement" Value="BottomRight">
                                                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                            <Trigger Property="TickPlacement" Value="Both">
                                                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                                                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TickBar x:Name="TopTick" SnapsToDevicePixels="True" Placement="Left" Width="4" Visibility="Collapsed">
                                                <TickBar.Fill>
                                                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                                                </TickBar.Fill>
                                            </TickBar>
                                            <Border x:Name="TrackBackground" Margin="0" CornerRadius="2" Width="4" Grid.Column="1" BorderThickness="1">
                                                <Border.BorderBrush>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0"/>
                                                                <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0"/>
                                                            </GradientStopCollection>
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.BorderBrush>
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0.25,0">
                                                        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0"/>
                                                        <GradientStop Color="{DynamicResource SliderTrackDarkColor}" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Track Grid.Column="1" x:Name="PART_Track">
                                                <Track.DecreaseRepeatButton>
                                                    <RepeatButton Style="{StaticResource DecreaseSliderButtonStyle}" Command="Slider.DecreaseLarge"/>
                                                </Track.DecreaseRepeatButton>
                                                <Track.Thumb>
                                                    <Thumb Style="{StaticResource SliderThumbStyle}"/>
                                                </Track.Thumb>
                                                <Track.IncreaseRepeatButton>
                                                    <RepeatButton Style="{StaticResource IncreaseSliderButtonStyle}" Command="Slider.IncreaseLarge"/>
                                                </Track.IncreaseRepeatButton>
                                            </Track>
                                            <TickBar x:Name="BottomTick" SnapsToDevicePixels="True" Grid.Column="2" Fill="{TemplateBinding Foreground}" Placement="Right" Width="4" Visibility="Collapsed"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="TickPlacement" Value="TopLeft">
                                                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                            <Trigger Property="TickPlacement" Value="BottomRight">
                                                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                            <Trigger Property="TickPlacement" Value="Both">
                                                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                                                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                    <Style TargetType="{x:Type Slider}">
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Style.Triggers>
                                            <Trigger Property="Orientation" Value="Horizontal">
                                                <Setter Property="MinWidth" Value="104"/>
                                                <Setter Property="MinHeight" Value="21"/>
                                                <Setter Property="Template" Value="{StaticResource HorizontalSlider}"/>
                                            </Trigger>
                                            <Trigger Property="Orientation" Value="Vertical">
                                                <Setter Property="MinWidth" Value="21"/>
                                                <Setter Property="MinHeight" Value="104"/>
                                                <Setter Property="Template" Value="{StaticResource VerticalSlider}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Slider.Resources>
                            </Slider>
                            <TextBlock Grid.Column="4" Grid.Row="0" Text="{Binding Path=Settings.RunningVolume, NotifyOnTargetUpdated=True}" Style="{StaticResource LabelTextBlockStyle}" HorizontalAlignment="Right"/>
                        </Grid>
                    </Grid>
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.ActiveWhenLocked, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0" Text="Continue performing actions when session is locked" Style="{StaticResource LabelTextBlockStyle}"/>
                        <Image Margin="10,0,0,0" Source="/Resources/Warning_128x128.png" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="Allowing actions to continue performing whilst your&#xD;&#xA;session is locked may cause unexpected behaviour.">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.ActiveWhenLocked, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </StackPanel>
                    <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.EnableLogging, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0" Text="Enabled logging" Style="{StaticResource LabelTextBlockStyle}"/>
                        <Grid Margin="20,0,0,0">
                            <Grid.Style>
                                <Style TargetType="Grid" >
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.EnableLogging, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <!--<xctk:WatermarkTextBox Grid.Column="0" Grid.Row="0" Text="{Binding Path=Settings.LogPath, NotifyOnTargetUpdated=True}" Watermark="Log file path"/>-->
                            <Button Grid.Column="0" Content="Open" Click="OpenLogButton_Click"/>
                            <Button Grid.Column="2" Content="Follow" Click="FollowLogButton_Click"/>
                        </Grid>
                    </StackPanel>
                    <!--<StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.HookKeyEnabled, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <TextBlock Margin="5,0,0,0" Text="Start/Stop Move Mouse using the keyboard" Style="{StaticResource LabelTextBlockStyle}"/>
                    </StackPanel>-->
                    <!--<StackPanel Style="{StaticResource OptionStackPanelStyle}">
                        <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" Grid.Row="8" IsChecked="{Binding Path=Settings.EnableLogging, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                        <StackPanel Grid.Column="2" Grid.Row="8" Orientation="Horizontal" Margin="5,0,0,0">
                            <TextBlock Text="Enable activity logs with a maximum buffer of" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:IntegerUpDown Value="{Binding Path=Settings.LoggingBuffer, NotifyOnTargetUpdated=True}" IsEnabled="{Binding Path=Settings.EnableLogging, NotifyOnTargetUpdated=True}" Increment="1" Minimum="1" Maximum="99999" Margin="5,0,5,0"/>
                        </StackPanel>
                    </StackPanel>-->
                    <!--make move mouse hidden/topmost when running-->
                </StackPanel>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Appearance_Dark_64x64.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Appearance_Light_64x64.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Appearance_Light_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="Appearance" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid Margin="10">
                    <!--<Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>-->
                    <StackPanel Grid.Column="0" Orientation="Vertical">
                        <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Hide Move Mouse window" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.TopmostWhenRunning, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Show topmost when running" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.MinimiseOnStop, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Minimise when not running" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.HideFromTaskbar, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Hide from taskbar" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <!--todo this should hide overrides for title and icon-->
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.HideFromAltTab, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Hide from Alt+Tab" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <Grid Height="22" Margin="0,0,0,10">
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=Settings.HideFromAltTab, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" IsChecked="{Binding Path=Settings.OverrideWindowTitle, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Grid.Column="1" Margin="5,0,0,0" Text="Override window title" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:WatermarkTextBox Grid.Column="3" Text="{Binding Path=Settings.WindowTitle, NotifyOnTargetUpdated=True}" Watermark="Window title" HorizontalAlignment="Stretch">
                                <xctk:WatermarkTextBox.Style>
                                    <Style TargetType="xctk:WatermarkTextBox" BasedOn="{StaticResource {x:Type xctk:WatermarkTextBox}}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Settings.OverrideWindowTitle, NotifyOnTargetUpdated=True}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </xctk:WatermarkTextBox.Style>
                            </xctk:WatermarkTextBox>
                        </Grid>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.PreventScreenBurn, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Enable screen burn prevention" Style="{StaticResource LabelTextBlockStyle}"/>
                            <Image Source="/Resources/Help_Dark_64x64.png" Margin="10,0,0,0" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" ToolTip="Enabling this option will introduce a subtle movement to&#xD;&#xA;Move Mouse, which although unnoticeable to the eye, will&#xD;&#xA;help prevent screen burn in scenarios where Move Mouse&#xD;&#xA;is on screen for prolonged periods of time."/>
                        </StackPanel>
                        <StackPanel Style="{StaticResource OptionStackPanelStyle}">
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.HideSystemTrayIcon, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Hide system tray icon" Style="{StaticResource LabelTextBlockStyle}"/>
                            <Image Source="/Resources/Warning_128x128.png" Margin="10,0,0,0" ToolTipService.ShowDuration="{x:Static sys:Int32.MaxValue}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="If you opt to hide both the Move Mouse window and&#xD;&#xA;system tray icon, there will be no way to access the&#xD;&#xA;settings for further customisations.&#xD;&#xA;&#xD;&#xA;The Move Mouse system tray icon will be visible&#xD;&#xA;momentarily at launch, which will allow you to&#xD;&#xA;right-click and access the settings.">
                                <Image.Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True"/>
                                                    <Condition Binding="{Binding Path=Settings.HideSystemTrayIcon, NotifyOnTargetUpdated=True}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <!--<StackPanel.ToolTip>
                                <Image Source="/Resources/Twitter_Light_64x64.png"/>
                            </StackPanel.ToolTip>-->
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.ShowMoveMouseStatus, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Show current status on main window" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.DisableButtonAnimation, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="Disable button animations" Style="{StaticResource LabelTextBlockStyle}"/>
                        </StackPanel>
                        <StackPanel>
                            <StackPanel.Style>
                                <Style TargetType="StackPanel" BasedOn="{StaticResource OptionStackPanelStyle}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Settings.HideMainWindow, NotifyOnTargetUpdated=True}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <toggleSwitch:HorizontalToggleSwitch IsChecked="{Binding Path=Settings.StandWithUkraine, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Margin="5,0,0,0" Text="#StandWithUkraine" Style="{StaticResource LabelTextBlockStyle}"/>
                            <Grid Margin="10,0,0,0" Height="15" Width="22">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle Grid.Row="0" Fill="#0057b7"/>
                                <Rectangle Grid.Row="1" Fill="#ffd700"/>
                            </Grid>
                        </StackPanel>
                        <!--<Grid Height="22">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="125"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="22"/>
                            </Grid.ColumnDefinitions>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="0" IsChecked="{Binding Path=Settings.OverrideIcon, NotifyOnTargetUpdated=True, Mode=TwoWay}"/>
                            <TextBlock Grid.Column="1" Margin="5,0,0,0" Text="Override icon" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:WatermarkTextBox Grid.Column="3" Text="{Binding Path=Settings.IconPath, NotifyOnTargetUpdated=True}" Watermark="Icon Path" HorizontalAlignment="Stretch">
                                <xctk:WatermarkTextBox.Style>
                                    <Style TargetType="xctk:WatermarkTextBox" BasedOn="{StaticResource {x:Type xctk:WatermarkTextBox}}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Settings.OverrideIcon, NotifyOnTargetUpdated=True}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </xctk:WatermarkTextBox.Style>
                            </xctk:WatermarkTextBox>
                            <Button Grid.Column="5" HorizontalAlignment="Left" Style="{StaticResource NoChromeButton}" ToolTip="Browse to icon" Cursor="Hand" Click="IconPathBrowseButton_OnClick">
                                <Image Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality">
                                    <Image.Style>
                                        <Style TargetType="Image">
                                            <Setter Property="Source" Value="/Resources/FileOpen_Dark_64x64.png"/>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/FileOpen_Light_64x64.png"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Binding Path=Settings.OverrideIcon, NotifyOnTargetUpdated=True}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                        </Grid>-->
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Resources>
                    <DataTemplate DataType="{x:Type schedules:SimpleSchedule}">
                        <DataTemplate.Resources>
                            <Style TargetType="toggleSwitch:HorizontalToggleSwitch" BasedOn="{StaticResource {x:Type toggleSwitch:HorizontalToggleSwitch}}">
                                <Setter Property="Width" Value="Auto"/>
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="CheckedForeground" Value="{StaticResource StandardDarkBackgroundSolidColorBrush}"/>
                                <Setter Property="UncheckedForeground" Value="{StaticResource StandardDisabledControlColorBrush}"/>
                            </Style>
                        </DataTemplate.Resources>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="70"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="10"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Column="1" Grid.Row="1" Text="Action" Style="{StaticResource LabelTextBlockStyle}"/>
                            <ComboBox Grid.Column="3" Grid.Row="1" SelectedItem="{Binding Path=Action, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=ScheduleActionValues}" HorizontalAlignment="Stretch"/>
                            <TextBlock Grid.Column="1" Grid.Row="3" Text="Time" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:TimeSpanUpDown Grid.Column="3" Grid.Row="3" Value="{Binding Path=Time, NotifyOnTargetUpdated=True, UpdateSourceTrigger=LostFocus}" Minimum="0:0:0" Maximum="23:59:59" HorizontalAlignment="Stretch"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="5" Grid.Row="1" IsChecked="{Binding Path=Monday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Mon" CheckedContent="Mon"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="7" Grid.Row="1" IsChecked="{Binding Path=Tuesday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Tue" CheckedContent="Tue"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="9" Grid.Row="1" IsChecked="{Binding Path=Wednesday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Wed" CheckedContent="Wed"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="11" Grid.Row="1" IsChecked="{Binding Path=Thursday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Thu" CheckedContent="Thu"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="5" Grid.Row="3" IsChecked="{Binding Path=Friday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Fri" CheckedContent="Fri"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="7" Grid.Row="3" IsChecked="{Binding Path=Saturday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Sat" CheckedContent="Sat"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="9" Grid.Row="3" IsChecked="{Binding Path=Sunday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Sun" CheckedContent="Sun"/>
                            <Button Grid.Column="13" Grid.Row="1" Grid.RowSpan="3" Style="{StaticResource TaskActionButtonStyle}" Command="{Binding ElementName=ScheduleItemsControl, Path=DataContext.RemoveSelectedScheduleCommand, NotifyOnTargetUpdated=True}" CommandParameter="{Binding Path=Id}" Margin="0">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/ActionsRemove_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/ActionsRemove_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="15" Grid.RowSpan="5" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}"/>
                        </Grid>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type schedules:AdvancedSchedule}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="70"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="10"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Column="1" Grid.Row="1" Text="Action" Style="{StaticResource LabelTextBlockStyle}"/>
                            <ComboBox Grid.Column="3" Grid.Row="1" SelectedItem="{Binding Path=Action, NotifyOnTargetUpdated=True}" ItemsSource="{Binding Path=ScheduleActionValues}" HorizontalAlignment="Stretch"/>
                            <TextBlock Grid.Column="5" Grid.Row="1" Text="Schedule" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:WatermarkTextBox Grid.Column="7" Grid.Row="1" Text="{Binding Path=Schedule, NotifyOnTargetUpdated=True}" Watermark="Cron Expression">
                                <xctk:WatermarkTextBox.Style>
                                    <Style TargetType="xctk:WatermarkTextBox" BasedOn="{StaticResource {x:Type xctk:WatermarkTextBox}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsValid, NotifyOnTargetUpdated=True}" Value="False">
                                                <Setter Property="BorderBrush" Value="Red"/>
                                                <Setter Property="BorderThickness" Value="2"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </xctk:WatermarkTextBox.Style>
                            </xctk:WatermarkTextBox>
                            <Button Grid.Column="9" Grid.Row="1" Style="{StaticResource TaskActionButtonStyle}" Click="CronHelpButton_OnClick" Margin="0">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/Help_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/Help_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Button Grid.Column="11" Grid.Row="1" Style="{StaticResource TaskActionButtonStyle}" Command="{Binding ElementName=ScheduleItemsControl, Path=DataContext.RemoveSelectedScheduleCommand, NotifyOnTargetUpdated=True}" CommandParameter="{Binding Path=Id}" Margin="0">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/ActionsRemove_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/ActionsRemove_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="13" Grid.RowSpan="3" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}"/>
                        </Grid>
                    </DataTemplate>
                </TabItem.Resources>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Schedules_Dark_64x64.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Schedules_Light_64x64.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Schedules_Light_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="Schedules" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid Margin="10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="10"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <!--<ScrollViewer.Resources>
                            <Style TargetType="ScrollViewer" BasedOn="{StaticResource StandardScrollViewerStyle}"/>
                        </ScrollViewer.Resources>-->
                        <ItemsControl Name="ScheduleItemsControl" ItemsSource="{Binding Path=Settings.Schedules, NotifyOnTargetUpdated=True}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0" Background="Transparent" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}"/>
                    </ScrollViewer>
                    <StackPanel Grid.Column="2" VerticalAlignment="Center">
                        <Button>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource TaskActionButtonStyle}">
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="Click">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                                        </BooleanAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <Button.ContextMenu>
                                <ContextMenu StaysOpen="True" Style="{StaticResource ContextMenuStyle}">
                                    <MenuItem Header="Simple Schedule" Click="AddSimpleSchedule_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                        <MenuItem.Icon>
                                            <Image Source="/Resources/Schedules_Light_64x64.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Advanced Schedule" Click="AddAdvancedSchedule_OnClick" Style="{StaticResource TaskActionButtonMenuItemStyle}">
                                        <MenuItem.Icon>
                                            <Image Source="/Resources/Schedules_Light_64x64.png" Style="{StaticResource TaskActionButtonMenuImageStyle}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </Button.ContextMenu>
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ActionsAdd_Dark_64x64.png"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="/Resources/ActionsAdd_Light_64x64.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                        </Button>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Resources>
                    <DataTemplate DataType="{x:Type classes:Blackout}">
                        <DataTemplate.Resources>
                            <Style TargetType="toggleSwitch:HorizontalToggleSwitch" BasedOn="{StaticResource {x:Type toggleSwitch:HorizontalToggleSwitch}}">
                                <Setter Property="Width" Value="Auto"/>
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="CheckedForeground" Value="{StaticResource StandardDarkBackgroundSolidColorBrush}"/>
                                <Setter Property="UncheckedForeground" Value="{StaticResource StandardDisabledControlColorBrush}"/>
                            </Style>
                        </DataTemplate.Resources>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="70"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="10"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Column="1" Grid.Row="1" Text="Time" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:TimeSpanUpDown Grid.Column="3" Grid.Row="1" Value="{Binding Path=Time, NotifyOnTargetUpdated=True, UpdateSourceTrigger=LostFocus}" Minimum="0:0:0" Maximum="23:59:59" HorizontalAlignment="Stretch"/>
                            <TextBlock Grid.Column="1" Grid.Row="3" Text="Duration" Style="{StaticResource LabelTextBlockStyle}"/>
                            <xctk:TimeSpanUpDown Grid.Column="3" Grid.Row="3" Value="{Binding Path=Duration, NotifyOnTargetUpdated=True, UpdateSourceTrigger=LostFocus}" Minimum="0:0:1" Maximum="23:59:59" HorizontalAlignment="Stretch"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="5" Grid.Row="1" IsChecked="{Binding Path=Monday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Mon" CheckedContent="Mon"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="7" Grid.Row="1" IsChecked="{Binding Path=Tuesday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Tue" CheckedContent="Tue"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="9" Grid.Row="1" IsChecked="{Binding Path=Wednesday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Wed" CheckedContent="Wed"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="11" Grid.Row="1" IsChecked="{Binding Path=Thursday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Thu" CheckedContent="Thu"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="5" Grid.Row="3" IsChecked="{Binding Path=Friday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Fri" CheckedContent="Fri"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="7" Grid.Row="3" IsChecked="{Binding Path=Saturday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Sat" CheckedContent="Sat"/>
                            <toggleSwitch:HorizontalToggleSwitch Grid.Column="9" Grid.Row="3" IsChecked="{Binding Path=Sunday, NotifyOnTargetUpdated=True, Mode=TwoWay}" UncheckedContent="Sun" CheckedContent="Sun"/>
                            <Button Grid.Column="13" Grid.Row="1" Grid.RowSpan="3" Style="{StaticResource TaskActionButtonStyle}" Command="{Binding ElementName=ScheduleItemsControl, Path=DataContext.RemoveSelectedBlackoutCommand, NotifyOnTargetUpdated=True}" CommandParameter="{Binding Path=Id}" Margin="0">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                            <Setter Property="Source" Value="/Resources/ActionsRemove_Dark_64x64.png"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="/Resources/ActionsRemove_Light_64x64.png"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                            <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="15" Grid.RowSpan="5" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}"/>
                        </Grid>
                    </DataTemplate>
                </TabItem.Resources>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Moon_Dark_128x128.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Moon_Light_128x128.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Moon_Light_128x128.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="Blackouts" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid Margin="10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="10"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <!--<ScrollViewer.Resources>
                            <Style TargetType="ScrollViewer" BasedOn="{StaticResource StandardScrollViewerStyle}"/>
                        </ScrollViewer.Resources>-->
                        <ItemsControl Name="BlackoutItemsControl" ItemsSource="{Binding Path=Settings.Blackouts, NotifyOnTargetUpdated=True}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0" Background="Transparent" BorderThickness="1" BorderBrush="{StaticResource StandardBorderBrush}"/>
                    </ScrollViewer>
                    <StackPanel Grid.Column="2" VerticalAlignment="Center">
                        <Button Command="{Binding Path=AddBlackoutCommand, NotifyOnTargetUpdated=True}" Style="{StaticResource TaskActionButtonStyle}">
                            <Image>
                                <Image.Style>
                                    <Style TargetType="Image" BasedOn="{StaticResource TaskActionButtonImageStyle}">
                                        <Setter Property="Source" Value="/Resources/ActionsAdd_Dark_64x64.png"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="/Resources/ActionsAdd_Light_64x64.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                        </Button>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource TabHeaderImageStyle}">
                                    <Setter Property="Source" Value="/Resources/Information_Dark_64x64.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Information_Light_64x64.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Source" Value="/Resources/Information_Light_64x64.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="About" Style="{StaticResource TabHeaderTextBlockStyle}"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid Margin="10">
                    <Grid>
                        <Grid.Resources>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource LabelTextBlockStyle}"/>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" FontWeight="Bold" FontSize="18">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Move Mouse {0}">
                                    <Binding Path="Version" Mode="OneWay"/>
                                    <Binding Path="HomePage" Mode="OneWay"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                        <Image Grid.Row="2" Grid.Column="0" Source="/Resources/Copyright_Dark_64x64.png"/>
                        <TextBlock Grid.Row="2" Grid.Column="2" Text="{Binding Path=Copyright, Mode=OneWay}"/>
                        <Image Grid.Row="4" Grid.Column="0" Source="/Resources/Home_Dark_64x64.png"/>
                        <TextBlock Grid.Row="4" Grid.Column="2" Text="{Binding Path=HomePage, Mode=OneWay}" Style="{StaticResource HyperLinkTextBlockStyle}" MouseDown="HomeLink_OnMouseDown"/>
                        <Image Grid.Row="6" Grid.Column="0" Source="/Resources/Mail_Dark_64x64.png"/>
                        <TextBlock Grid.Row="6" Grid.Column="2" Text="{Binding Path=MailAddress, Mode=OneWay}" Style="{StaticResource HyperLinkTextBlockStyle}" MouseDown="ContactLink_OnMouseDown"/>
                        <Image Grid.Row="8" Grid.Column="0" Source="/Resources/PayPal_Dark_64x64.png"/>
                        <TextBlock Grid.Row="8" Grid.Column="2" Text="https://www.paypal.com" Style="{StaticResource HyperLinkTextBlockStyle}" MouseDown="PayPalLink_OnMouseDown"/>
                        <Image Grid.Row="10" Grid.Column="0" Source="/Resources/Twitter_Dark_64x64.png"/>
                        <TextBlock Grid.Row="10" Grid.Column="2" Text="{Binding Path=TwitterUrl, Mode=OneWay}" Style="{StaticResource HyperLinkTextBlockStyle}" MouseDown="TwitterLink_OnMouseDown"/>
                        <Image Grid.Row="12" Grid.Column="0" Source="/Resources/GitHub_Dark_64x64.png"/>
                        <TextBlock Grid.Row="12" Grid.Column="2" Text="{Binding Path=GitHubUrl, Mode=OneWay}" Style="{StaticResource HyperLinkTextBlockStyle}" MouseDown="GitHubLink_OnMouseDown"/>
                    </Grid>
                    <Image Source="/Resources/Mouse.ico" HorizontalAlignment="Right" VerticalAlignment="Top" Width="96" Height="96"/>
                </Grid>
            </TabItem>
        </TabControl>
        <Button Content="Close" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,20,20" Click="CloseButton_OnClick"/>
        <Border BorderThickness="5" BorderBrush="{StaticResource StandardBorderBrush}"/>
    </Grid>
</Window>